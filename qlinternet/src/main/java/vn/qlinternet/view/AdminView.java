package vn.qlinternet.view;

import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.nio.file.Files;
import java.time.Duration;
import java.time.LocalTime;
import java.util.List;
import javax.swing.JDialog;

import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import vn.qlinternet.dao.InfoDao;

import vn.qlinternet.rental.Info;

/**
 *
 * @author Dell
 */
public class AdminView extends javax.swing.JFrame {

    
    private final String [] columnNames = new String [] {
            "ID", "Tên khách", "Tên máy", "Thời gian", "Thành tiền"};
    /**
     * Creates new form AdminView
     */
    public AdminView() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        infoTable = new javax.swing.JTable();
        showComputerbButton = new javax.swing.JButton();
        showGuestButton = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        sortComputerNameButton = new javax.swing.JButton();
        sortGuestNameButton = new javax.swing.JButton();
        payButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        infoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Tên khách", "Tên máy", "Thời gian", "Thành tiền"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        infoTable.setColumnSelectionAllowed(true);
        infoTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(infoTable);
        infoTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        showComputerbButton.setText("Danh sách máy");
        showComputerbButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showComputerbButtonActionPerformed(evt);
            }
        });

        showGuestButton.setText("Danh sách khách");
        showGuestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showGuestButtonActionPerformed(evt);
            }
        });

        jButton2.setText("Thoát");

        sortComputerNameButton.setText("Sắp xếp theo tên máy");
        sortComputerNameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortComputerNameButtonActionPerformed(evt);
            }
        });

        sortGuestNameButton.setText("Sắp xếp theo tên khách");
        sortGuestNameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortGuestNameButtonActionPerformed(evt);
            }
        });

        payButton.setText("Thanh toán");
        payButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(showComputerbButton)
                        .addGap(18, 18, 18)
                        .addComponent(showGuestButton)
                        .addGap(67, 67, 67)
                        .addComponent(payButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(sortComputerNameButton)
                        .addGap(18, 18, 18)
                        .addComponent(sortGuestNameButton)
                        .addGap(80, 80, 80)
                        .addComponent(jButton2))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 940, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(showComputerbButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(showGuestButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sortComputerNameButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sortGuestNameButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(payButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void showComputerbButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showComputerbButtonActionPerformed
        JDialog dialog = new JDialog((Frame) null, "Computer List", true);
        dialog.getContentPane().add(new ComputerListPanel());
        dialog.pack();
        dialog.setLocationRelativeTo(null);
        dialog.setVisible(true);
    }//GEN-LAST:event_showComputerbButtonActionPerformed

    private void showGuestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showGuestButtonActionPerformed
        JDialog dialog = new JDialog((Frame) null, "Guest List", true);
        dialog.getContentPane().add(new GuestListPanel());
        dialog.pack();
        dialog.setLocationRelativeTo(null);
        dialog.setVisible(true);
    }//GEN-LAST:event_showGuestButtonActionPerformed

    private void payButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payButtonActionPerformed
        int selectedRow = infoTable.getSelectedRow();
        if (selectedRow == -1) {
                JOptionPane.showMessageDialog(this, "Chọn máy để thanh toán.");
                return;
            } 
        int confirmPayment = JOptionPane.showConfirmDialog(this, "Thanh toán máy này", "Confirm Payment", JOptionPane.YES_NO_OPTION);
            if (confirmPayment == JOptionPane.YES_OPTION){
                InfoDao infoDao = new InfoDao();
                List<Info> list = infoDao.getListInfos();                        
                int id = (int) infoTable.getValueAt(selectedRow, 0);
                Info info = list.get(id);
                info.getComputer().setAvailability(true);
                String d = (String) infoTable.getValueAt(selectedRow, 4);
                d = d.replace("đ", "");
                info.getGuest().incPoint(Integer.parseInt(d) / 1000);
                infoDao.delete(info);
            }
    }//GEN-LAST:event_payButtonActionPerformed

    private void sortComputerNameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortComputerNameButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sortComputerNameButtonActionPerformed

    private void sortGuestNameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortGuestNameButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sortGuestNameButtonActionPerformed

    public void showMessage(String message) {
        JOptionPane.showMessageDialog(this, message);
    }
    
    /**
     * @param list
     */
    public void showListInfo(List<Info> list) {
        int size = list.size();
        
        
        Object [][] infos = new Object[size][5];
        for (int i = 0; i < size; i++) {
                infos[i][0] = list.get(i).getId();
                infos[i][1] = list.get(i).getGuest().getName();
                infos[i][2] = list.get(i).getComputer().getName();
                Duration d = Duration.between(LocalTime.parse(list.get(i).getRentalTime()), LocalTime.now());
                String s = d.toHours() + ":" + d.toMinutes() % 60;
                infos[i][3] = s;
                s = (d.toMinutes() / 10 + 1) * 1000 + "đ";
                infos[i][4] = s;
        }
        infoTable.setModel(new DefaultTableModel(infos, columnNames));
        Timer timer = new Timer(60000, (ActionEvent e) -> {
            for (int i = 0; i < size; i++) {
                infos[i][0] = list.get(i).getId();
                infos[i][1] = list.get(i).getGuest().getName();
                infos[i][2] = list.get(i).getComputer().getName();
                Duration d = Duration.between(LocalTime.parse(list.get(i).getRentalTime()), LocalTime.now());
                String s = d.toHours() + "";
                if (d.toMinutes() % 60 < 10)
                    s = s + ":0" + d.toMinutes() % 60;
                else
                    s = s + ":" + d.toMinutes() % 60;                
                infos[i][3] = s;
                s = (d.toMinutes() / 10 + 1) * 1000 + "đ";
                infos[i][4] = s;
            }
            infoTable.setModel(new DefaultTableModel(infos, columnNames));            
            
        });
        
        // start the timer
        timer.start();        
    }
    
    public void fillInfoFromSelectedRow() {
        int row = infoTable.getSelectedRow();
        if (row >= 0){
            
        }
    }
    
    public void addShowComputerListener(ActionListener listener) {
        showComputerbButton.addActionListener(listener);
    }
    
    public void addShowGuestListener(ActionListener listener) {
        showGuestButton.addActionListener(listener);
    }
    
    public void addSortComputerNameListener(ActionListener listener) {
        sortComputerNameButton.addActionListener(listener);
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable infoTable;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton payButton;
    private javax.swing.JButton showComputerbButton;
    private javax.swing.JButton showGuestButton;
    private javax.swing.JButton sortComputerNameButton;
    private javax.swing.JButton sortGuestNameButton;
    // End of variables declaration//GEN-END:variables
}
